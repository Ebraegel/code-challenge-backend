name: Doro Traffic App CI Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-1
  UI_IMAGE: "doro-traffic-ui:${{ github.sha }}"
  BACKEND_IMAGE: "doro-traffic-backend:${{ github.sha }}"
  NGINX_IMAGE: "doro-traffic-nginx:${{ github.sha }}"

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build ./ui --tag "$ECR_REGISTRY/$UI_IMAGE"
          docker build ./backend --tag "$ECR_REGISTRY/$BACKEND_IMAGE"
          docker build ./nginx --tag "$ECR_REGISTRY/$NGINX_IMAGE"
          docker push "$ECR_REGISTRY/$UI_IMAGE"
          docker push "$ECR_REGISTRY/$BACKEND_IMAGE"
          docker push "$ECR_REGISTRY/$NGINX_IMAGE"

  test-ui:
    name: Test UI
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run UI Tests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          docker run "$ECR_REGISTRY/$UI_IMAGE" npm test -- --watchAll=false

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Backend Tests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          docker run "$ECR_REGISTRY/$BACKEND_IMAGE" pytest

  deploy:
    needs:
      - build
      - test-ui
      - test-backend
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download task definition
      id: download-def
      run: |
        aws ecs describe-task-definition --task-definition doro-traffic-app-task-definition --query taskDefinition > task-definition.json

    - name: Render Amazon ECS task definition for UI container
      id: render-ui
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ui
        image: ${{ secrets.ECR_REGISTRY }}/${{ env.UI_IMAGE }}

    - name: Render Amazon ECS task definition for backend container
      id: render-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-ui.outputs.task-definition }}
        container-name: backend
        image: ${{ secrets.ECR_REGISTRY }}/${{ env.BACKEND_IMAGE }}

    - name: Render Amazon ECS task definition for nginx container
      id: render-nginx
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-backend.outputs.task-definition }}
        container-name: nginx
        image: ${{ secrets.ECR_REGISTRY }}/${{ env.NGINX_IMAGE }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-nginx.outputs.task-definition }}
        service: doro-traffic-app-service
        cluster: doro-traffic-app-cluster
        wait-for-service-stability: true
